// Global variable definitions.  Things which need to be known by 
// epics should be global, things which should not be changed externally
// should be defines

// Global CONSTANTS, of the form kXXXX

#define kTRUE  1
#define kFALSE 0
#define kON    1
#define kOFF   0
#define kONE   1
#define kZERO  0

// Everyone has to have their slice of the pie
#define kPI 3.141592653589793
#define kDegToRad (kPI/180)
#define kRadToDeg (180/kPI)

// Home offsets (possible use other method for bissc abs)
#define kNMOTORS      4
#define kM1OFFSET (13600.063-5000)
#define kM2OFFSET (12594.363-5000)
#define kM3OFFSET (52204.435)
#define kM4OFFSET (52771.196)

// Speed for final home search move
#define kHOMESPEED 0.5

// Encoder count conversions
#define kEncCtsPerMm        1000
#define kEncCtsPerUm        1.0
#define kRotEncCtsPerRad    180
#define kRotEncCtsPerURad   0.180

// Absolute hard-coded limits in case all else fails
// kBUFFERUM is used to buffer soft-limit interlocks
#define kOpenGapSpeed         500
#define kGapOpeningTimeout  60000
#define kMAXGAP             40200
#define kMINGAP              4530
#define kMINELEV            -5000
#define kMAXELEV             5000
#define kMINTILT             -500
#define kMAXTILT              500
#define kMINTAPER            -520
#define kMAXTAPER             520
#define kBUFFERUM              50

// Unbelievable, but I cannot put comments after define statements in ppmac
// even if I use a terminator which is very very stupid.  So here we are
// and I'll put the comments above it...
// Different modes for motion:
//     Gap and eleation mode combined 4-motor motion
//     Gap and elevation mode separate motions
//     DS following US mode (for both gap and elev)
//     US following DS mode (for both gap and elev)
//     Fully individual mode
//
#define kMoveModeGapEleSep          0
#define kMoveModeGapEleComb         1
#define kMoveModeFollowingUS        2
#define kMoveModeFollowingDS        3
#define kMoveModeIndividual         4
#define kMoveModeFlyScan            5
#define kMoveModeOpenGapExecuting   6


// Countdown timer definitions are of the form TIMERXXY where XX is
// the PLC number, e.g. PLC06 -> XX = 06 and Y is the timer number
// within that PLC (since some PLCs may use multiple timers).  These
// timers translate to the Sys.CdTimer as Sys.CdTimer[XXY].  These
// timers are meant to be used only in a single PLC.  Global timers
// should be specified as GTIMERY where Y is 0-9

// Timers.  Be careful with use of these as some are used in multiple PLCs
// but considered mostly "owned" by the PLC number in the timer number,
// e.g. TIMER060 is the 0th timer in PLC 06 -> 060
#define TIMER040OPENGAP   Sys.CdTimer[40]
#define TIMER060HOMING    Sys.CdTimer[60]
#define TIMER130BRAKES    Sys.CdTimer[130]



// PVariable definitions
// PLC 01 - Startup

// PLC 02 - Movement in progress monitor
#define P_MovementInProgress  P200

// PLC 03 - Mode Change
#define P_MoveMode          P300
#define P_MoveModeReq       P301

// PLC 04 - Open Gap
#define P_OpenGapRequested        P400
#define P_OpenGapExecuting        P401
#define P_OpenGapExecutingTimeout P402

// PLC 06 - Homing
#define P_HomeRequest           P600
#define P_HomingInProgress      P601
#define P_MotorHomingNumber     P602
#define P_HomingThisMotor       P603
#define P_HomingSwitchNotFound  P697
#define P_HomingAmpError        P698
#define P_HomingTimeout         P699

// PLC 07 - Beacon
#define P_AnyError              P701

// PLC 08 - Move Request
#define P_InterlockState      P801
//#define P_MoveAborted         P804
#define P_GapSetpoint         P805
#define P_ElevSetpoint        P806
#define P_TaperSetpoint       P807
#define P_TiltSetpoint        P808
#define P_GapMoveRequest      P809
#define P_GapSpeed_um         P810
#define P_GapElevMoveRequest  P811
#define P_ElevMoveRequest     P812
#define P_ElevSpeed_um        P814

// PLC 09 - Girder Safety
#define P_StopAllStatus       P900
#define P_StopAllRequest      P901
#define P_MinGap              P902
#define P_MaxGap              P903
#define P_MinTaper            P904
#define P_MaxTaper            P905
#define P_MinElev             P906
#define P_MaxElev             P907
#define P_MinTilt             P908
#define P_MaxTilt             P909
#define P_GapError            P998
#define P_ElevError           P999


// PLC 10 - BISS encoder errors
#define P_PLC10Count          P1000
#define P_PLC10ResetCounts    P1001

#define P_Enc1Warnings        P1002
#define P_Enc2Warnings        P1003
#define P_Enc3Warnings        P1004
#define P_Enc4Warnings        P1005

#define P_Enc1Errors          P1006
#define P_Enc2Errors          P1007
#define P_Enc3Errors          P1008
#define P_Enc4Errors          P1009

#define P_Enc1CRCErrors       P1010
#define P_Enc2CRCErrors       P1011
#define P_Enc3CRCErrors       P1012
#define P_Enc4CRCErrors       P1013

#define P_Enc1Timeouts        P1014
#define P_Enc2Timeouts        P1015
#define P_Enc3Timeouts        P1016
#define P_Enc4Timeouts        P1017

#define P_Enc1ErrorLatch      P1018
#define P_Enc2ErrorLatch      P1019
#define P_Enc3ErrorLatch      P1020
#define P_Enc4ErrorLatch      P1021






// PLC 13 - Brake/AmpEna Timer
#define P_BrakeTimerArmed     P1300
#define P_BrakeTimeout        P1301


// PLC 15
#define P_AllBrakeReleaseReq  P1500
#define P_AllBrakesReleased   P1501
#define P_GapBrakeReleaseReq  P1502
#define P_GapBrakesReleased   P1503
#define P_ElevBrakeReleaseReq P1504
#define P_ElevBrakesReleased  P1505


// PLC 10
// Warning and error bits may be swapped in manual, need to check.
// High 1/kTRUE means error (biss inverted here)
#define LENC1WARNING    INT(1 - ((Acc84E[0].Chan[0].SerialEncDataB >> 16) & $1))
#define LENC2WARNING    INT(1 - ((Acc84E[0].Chan[1].SerialEncDataB >> 16) & $1))
#define LENC3WARNING    INT(1 - ((Acc84E[0].Chan[2].SerialEncDataB >> 16) & $1))
#define LENC4WARNING    INT(1 - ((Acc84E[0].Chan[3].SerialEncDataB >> 16) & $1))
#define LENC1ERROR      INT(1 - ((Acc84E[0].Chan[0].SerialEncDataB >> 17) & $1))
#define LENC2ERROR      INT(1 - ((Acc84E[0].Chan[1].SerialEncDataB >> 17) & $1))
#define LENC3ERROR      INT(1 - ((Acc84E[0].Chan[2].SerialEncDataB >> 17) & $1))
#define LENC4ERROR      INT(1 - ((Acc84E[0].Chan[3].SerialEncDataB >> 17) & $1))
#define LENC1TIMEOUT    INT((Acc84E[0].Chan[0].SerialEncDataB >> 23) & $1)
#define LENC2TIMEOUT    INT((Acc84E[0].Chan[1].SerialEncDataB >> 23) & $1)
#define LENC3TIMEOUT    INT((Acc84E[0].Chan[2].SerialEncDataB >> 23) & $1)
#define LENC4TIMEOUT    INT((Acc84E[0].Chan[3].SerialEncDataB >> 23) & $1)
#define LENC1CRCERROR   INT((Acc84E[0].Chan[0].SerialEncDataB >> 22) & $1)
#define LENC2CRCERROR   INT((Acc84E[0].Chan[1].SerialEncDataB >> 22) & $1)
#define LENC3CRCERROR   INT((Acc84E[0].Chan[2].SerialEncDataB >> 22) & $1)
#define LENC4CRCERROR   INT((Acc84E[0].Chan[3].SerialEncDataB >> 22) & $1)


// PLC 18
global gMagEndGapUS
global gMagEndGapUS

ptr pAmpEnaOut(5)->*
pAmpEnaOut(1)->Gate3[0].Chan[0].AmpEna
pAmpEnaOut(2)->Gate3[0].Chan[1].AmpEna
pAmpEnaOut(3)->Gate3[0].Chan[2].AmpEna
pAmpEnaOut(4)->Gate3[0].Chan[3].AmpEna


ptr pHomeFlag(5)->*
pHomeFlag(1)->Gate3[0].Chan[0].HomeFlag
pHomeFlag(2)->Gate3[0].Chan[1].HomeFlag
pHomeFlag(3)->Gate3[0].Chan[2].HomeFlag
pHomeFlag(4)->Gate3[0].Chan[3].HomeFlag


