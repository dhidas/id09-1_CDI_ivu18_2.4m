// Global variable definitions.  Things which need to be known by 
// epics should be in the form of #define statements, otherwise
// use of global is best.

// Global CONSTANTS, of the form kXXXX

#define kTRUE  1
#define kFALSE 0
#define kON    1
#define kOFF   0

// Everyone has to have their slice of the pie
#define kPI 3.141592653589793
#define kDegToRad (kPI/180)
#define kRadToDeg (180/kPI)

// Home offsets (possible use other method for bissc abs)
#define kNMOTORS      4
#define kM1OFFSET 87275
#define kM2OFFSET 49410
#define kM3OFFSET 87387
#define kM4OFFSET 50048
#define kM4OFFSET 50048
#define kM5OFFSET     0
#define kM6OFFSET     0

// Encoder count conversions
#define kEncCtsPerMm        4098.361
#define kEncCtsPerUm        4.098361
#define kRotEncCtsPerRad    180
#define kRotEncCtsPerURad   0.180

// Absolute hard-coded limits in case all else fails
// kBUFFERUM is used to buffer soft-limit interlocks
//#define kMAXGAP   40200
//#define kMINGAP    4530
//#define kMINELEV  -5000
//#define kMAXELEV   5000
//#define kMINTILT   -500
//#define kMAXTILT    500
//#define kMINTAPER  -500
//#define kMAXTAPER   500
//#define kBUFFERUM    50
#define kMAXGAP   10000
#define kMINGAP  -10000
#define kMINELEV  -5000
#define kMAXELEV   5000
#define kMINTILT  -1000
#define kMAXTILT   1000
#define kMINTAPER -1000
#define kMAXTAPER  1000
#define kBUFFERUM    50

// Unbelievable, but I cannot put comments after define statements in ppmac
// even if I use a terminator which is very very stupid.  So here we are
// and I'll put the comments above it...
// Different modes for motion:
//     Gap and eleation mode combined 4-motor motion
//     Gap and elevation mode separate motions
//     DS following US mode (for both gap and elev)
//     US following DS mode (for both gap and elev)
//     Fully individual mode
//
#define kMoveModeGapEleSep      0
#define kMoveModeGapEleComb     1
#define kMoveModeFollowingUS    2
#define kMoveModeFollowingDS    3
#define kMoveModeIndividual     4
#define kMoveModeFlyScan        5


global gFMOTOR(10);

// Countdown timer definitions are of the form TIMERXXY where XX is
// the PLC number, e.g. PLC06 -> XX = 06 and Y is the timer number
// within that PLC (since some PLCs may use multiple timers).  These
// timers translate to the Sys.CdTimer as Sys.CdTimer[XXY].  These
// timers are meant to be used only in a single PLC.  Global timers
// should be specified as GTIMERY where Y is 0-9

// Global timers
#define GTIMER0  Sys.CdTimer[0]

// Local Timers
#define TIMER060 Sys.CdTimer[60]



// PVariable definitions
// PLC 01 - Startup

// PLC 02 - Movement in progress monitor
#define P_MovementInProgress  P200

// PLC 03 - Mode Change
#define P_MoveMode          P300
#define P_MoveModeReq       P301

// PLC 06 - Homing
#define P_HomeRequest         P600
#define P_HomingInProgress    P601
#define P_MotorHomingNumber   P602
#define P_HomingAmpError      P698
#define P_HomingTimeout       P699

// PLC 08 - Move Request
#define P_InterlockState      P801
#define P_OpenGapExecuting    P802
#define P_BrakeTimeout        P803
#define P_MoveAborted         P804
#define P_GapSetpoint         P805
#define P_ElevSetpoint        P806
#define P_TaperSetpoint       P807
#define P_TiltSetpoint        P808
#define P_GapMoveRequest      P809
#define P_GapSpeed_um         P810
#define P_GapElevMoveRequest  P811
#define P_ElevMoveRequest     P812
#define P_ElevSpeed_um        P814

// PLC 09 - Girder Safety
#define P_StopAllStatus       P900
#define P_StopAllRequest      P901
#define P_MinGap              P902
#define P_MaxGap              P903
#define P_MinTaper            P904
#define P_MaxTaper            P905
#define P_MinElev             P906
#define P_MaxElev             P907
#define P_MinTilt             P908
#define P_MaxTilt             P909
#define P_GapError            P998
#define P_ElevError           P999


// PLC 10 - BISS encoder errors
#define P_PLC10Count          P1000
#define P_PLC10ResetCounts    P1001

#define P_Enc1Warnings        P1002
#define P_Enc2Warnings        P1003
#define P_Enc3Warnings        P1004
#define P_Enc4Warnings        P1005

#define P_Enc1Errors          P1006
#define P_Enc2Errors          P1007
#define P_Enc3Errors          P1008
#define P_Enc4Errors          P1009

#define P_Enc1CRCErrors       P1010
#define P_Enc2CRCErrors       P1011
#define P_Enc3CRCErrors       P1012
#define P_Enc4CRCErrors       P1013

#define P_Enc1Timeouts        P1014
#define P_Enc2Timeouts        P1015
#define P_Enc3Timeouts        P1016
#define P_Enc4Timeouts        P1017

#define P_Enc1ErrorLatch      P1018
#define P_Enc2ErrorLatch      P1019
#define P_Enc3ErrorLatch      P1020
#define P_Enc4ErrorLatch      P1021

// use user for mapping of status bits from encoder data
u.user:$3000 = Acc84E[0].Chan[0].SerialEncDataB
u.user:$3004 = Acc84E[0].Chan[1].SerialEncDataB
u.user:$3008 = Acc84E[0].Chan[2].SerialEncDataB
u.user:$300C = Acc84E[0].Chan[3].SerialEncDataB
u.user:$3010 = Gate3[0].Chan[0].HomeFlag
u.user:$3014 = Gate3[0].Chan[1].HomeFlag
u.user:$3018 = Gate3[0].Chan[2].HomeFlag
u.user:$301C = Gate3[0].Chan[3].HomeFlag

ptr pLEncTimeout(5)->*
pLEncTimeout(1)->u.user:$3000.23.1
pLEncTimeout(2)->u.user:$3004.23.1
pLEncTimeout(3)->u.user:$3008.23.1
pLEncTimeout(4)->u.user:$300C.23.1

ptr pLEncCRCError(5)->*
pLEncCRCError(1)->u.user:$3000.22.1
pLEncCRCError(2)->u.user:$3004.22.1
pLEncCRCError(3)->u.user:$3008.22.1
pLEncCRCError(4)->u.user:$300C.22.1

ptr pLEncError(5)->*
pLEncError(1)->u.user:$3000.17.1
pLEncError(2)->u.user:$3004.17.1
pLEncError(3)->u.user:$3008.17.1
pLEncError(4)->u.user:$300C.17.1

ptr pLEncWarning(5)->*
pLEncWarning(1)->u.user:$3000.16.1
pLEncWarning(2)->u.user:$3004.16.1
pLEncWarning(3)->u.user:$3008.16.1
pLEncWarning(4)->u.user:$300C.16.1


ptr pHomeFlag(5)->*
pHomeFlag(1)->u.user:$3010.8.1
pHomeFlag(2)->u.user:$3014.8.1
pHomeFlag(3)->u.user:$3018.8.1
pHomeFlag(4)->u.user:$301C.8.1




