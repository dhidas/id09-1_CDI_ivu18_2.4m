// Global variable definitions.  Things which need to be known by 
// epics should be global, things which should not be changed externally
// should be defines.  Global variables are listed here by their "main" PLC.

// Global CONSTANTS using "#define", of the form kXXXX

#define kTRUE  1
#define kFALSE 0
#define kON    1
#define kOFF   0
#define kONE   1
#define kZERO  0

// Everyone has to have their slice of the pie
#define kPI 3.141592653589793
#define kDegToRad (kPI/180)
#define kRadToDeg (180/kPI)

// Home offsets (possible use other method for bissc abs)
#define kNMOTORS      4
#define kM1OFFSET ((13600.063-5000)*1000)
#define kM2OFFSET (12594.363-5000)*1000)
#define kM3OFFSET ((49243.6089999999967)*1000)
#define kM4OFFSET ((61492.1699999999983)*1000)

// Speed for final home search move
#define kHOMESPEED 0.5

// Encoder count conversions
#define kEncCtsPerMm        1000000
#define kEncCtsPerUm        1000
#define kRotEncCtsPerRad    180
#define kRotEncCtsPerURad   0.180

// Absolute hard-coded limits in case all else fails
// kBUFFERUM is used to buffer soft-limit interlocks
#define kOpenGapSpeed         500
#define kGapOpeningTimeout  60000
#define kMAXGAP             40200
#define kMINGAP              4530
#define kMINELEV            -5000
#define kMAXELEV             5000
#define kMINTILT             -500
#define kMAXTILT              500
#define kMINTAPER            -520
#define kMAXTAPER             520
#define kBUFFERUM              50

// Unbelievable, but I cannot put comments after define statements in ppmac
// even if I use a terminator which is very very stupid.  So here we are
// and I'll put the comments above it...
// Different modes for motion:
//     Gap and eleation mode combined 4-motor motion
//     Gap and elevation mode separate motions
//     DS following US mode (for both gap and elev)
//     US following DS mode (for both gap and elev)
//     Fully individual mode
//
#define kMoveModeGapEleSep          0
#define kMoveModeGapEleComb         1
#define kMoveModeFollowingUS        2
#define kMoveModeFollowingDS        3
#define kMoveModeIndividual         4
#define kMoveModeFlyScan            5
#define kMoveModeOpenGapExecuting   6


// Countdown timer definitions are of the form TIMERXXY where XX is
// the PLC number, e.g. PLC06 -> XX = 06 and Y is the timer number
// within that PLC (since some PLCs may use multiple timers).  These
// timers translate to the Sys.CdTimer as Sys.CdTimer[XXY].  These
// timers are meant to be used only in a single PLC.  Global timers
// should be specified as GTIMERY where Y is 0-9

// Timers.  Be careful with use of these as some are used in multiple PLCs
// but considered mostly "owned" by the PLC number in the timer number,
// e.g. TIMER060 is the 0th timer in PLC 06 -> 060
#define TIMER040OPENGAP   Sys.CdTimer[40]
#define TIMER060HOMING    Sys.CdTimer[60]
#define TIMER130BRAKES    Sys.CdTimer[130]



// PVariable definitions
// PLC 01 - Startup

// PLC 02 - Movement in progress monitor
global gMovementInProgress

// PLC 03 - Mode Change
global gMoveMode
global gMoveModeReq

// PLC 04 - Open Gap
global gOpenGapRequested
global gOpenGapExecuting
global gOpenGapExecutingTimeout

// PLC 06 - Homing
global gHomeRequest
global gHomingInProgress
global gMotorHomingNumber
global gHomingThisMotor
global gHomingSwitchNotFound
global gHomingAmpError
global gHomingTimeout

// PLC 07 - Beacon
global gAnyError

// PLC 08 - Move Request
global gInterlockState
//global gMoveAborted
global gGapSetpoint
global gElevSetpoint
global gTaperSetpoint
global gTiltSetpoint
global gGapMoveRequest
global gGapSpeed_um
global gGapElevMoveRequest
global gElevMoveRequest
global gElevSpeed_um

// PLC 09 - Girder Safety
global gStopAllStatus
global gStopAllRequest
global gMinGap
global gMaxGap
global gMinTaper
global gMaxTaper
global gMinElev
global gMaxElev
global gMinTilt
global gMaxTilt
global gGapError
global gElevError


// PLC 10 - BISS encoder errors
global gPLC10Count
global gPLC10ResetCounts

global gEnc1Warnings
global gEnc2Warnings
global gEnc3Warnings
global gEnc4Warnings

global gEnc1Errors
global gEnc2Errors
global gEnc3Errors
global gEnc4Errors

global gEnc1CRCErrors
global gEnc2CRCErrors
global gEnc3CRCErrors
global gEnc4CRCErrors

global gEnc1Timeouts
global gEnc2Timeouts
global gEnc3Timeouts
global gEnc4Timeouts

global gEnc1ErrorLatch
global gEnc2ErrorLatch
global gEnc3ErrorLatch
global gEnc4ErrorLatch






// PLC 13 - Brake/AmpEna Timer
global gBrakeTimerArmed
global gBrakeTimeout


// PLC 15
global gAllBrakeReleaseReq
global gAllBrakesReleased
global gGapBrakeReleaseReq
global gGapBrakesReleased
global gElevBrakeReleaseReq
global gElevBrakesReleased


// PLC 10
// Warning and error bits may be swapped in manual, need to check.
// High 1/kTRUE means error (biss inverted here)
#define LENC1WARNING    INT(1 - ((Acc84E[0].Chan[0].SerialEncDataB >> 16) & $1))
#define LENC2WARNING    INT(1 - ((Acc84E[0].Chan[1].SerialEncDataB >> 16) & $1))
#define LENC3WARNING    INT(1 - ((Acc84E[0].Chan[2].SerialEncDataB >> 16) & $1))
#define LENC4WARNING    INT(1 - ((Acc84E[0].Chan[3].SerialEncDataB >> 16) & $1))
#define LENC1ERROR      INT(1 - ((Acc84E[0].Chan[0].SerialEncDataB >> 17) & $1))
#define LENC2ERROR      INT(1 - ((Acc84E[0].Chan[1].SerialEncDataB >> 17) & $1))
#define LENC3ERROR      INT(1 - ((Acc84E[0].Chan[2].SerialEncDataB >> 17) & $1))
#define LENC4ERROR      INT(1 - ((Acc84E[0].Chan[3].SerialEncDataB >> 17) & $1))
#define LENC1TIMEOUT    INT((Acc84E[0].Chan[0].SerialEncDataB >> 23) & $1)
#define LENC2TIMEOUT    INT((Acc84E[0].Chan[1].SerialEncDataB >> 23) & $1)
#define LENC3TIMEOUT    INT((Acc84E[0].Chan[2].SerialEncDataB >> 23) & $1)
#define LENC4TIMEOUT    INT((Acc84E[0].Chan[3].SerialEncDataB >> 23) & $1)
#define LENC1CRCERROR   INT((Acc84E[0].Chan[0].SerialEncDataB >> 22) & $1)
#define LENC2CRCERROR   INT((Acc84E[0].Chan[1].SerialEncDataB >> 22) & $1)
#define LENC3CRCERROR   INT((Acc84E[0].Chan[2].SerialEncDataB >> 22) & $1)
#define LENC4CRCERROR   INT((Acc84E[0].Chan[3].SerialEncDataB >> 22) & $1)


// PLC 18
global gMagEndGapUS
global gMagEndGapUS

ptr pAmpEnaOut(5)->*
pAmpEnaOut(1)->Gate3[0].Chan[0].AmpEna
pAmpEnaOut(2)->Gate3[0].Chan[1].AmpEna
pAmpEnaOut(3)->Gate3[0].Chan[2].AmpEna
pAmpEnaOut(4)->Gate3[0].Chan[3].AmpEna


ptr pHomeFlag(5)->*
pHomeFlag(1)->Gate3[0].Chan[0].HomeFlag
pHomeFlag(2)->Gate3[0].Chan[1].HomeFlag
pHomeFlag(3)->Gate3[0].Chan[2].HomeFlag
pHomeFlag(4)->Gate3[0].Chan[3].HomeFlag


