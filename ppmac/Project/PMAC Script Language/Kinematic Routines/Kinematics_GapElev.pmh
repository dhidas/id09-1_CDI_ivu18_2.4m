Coord[2].SegMoveTime = 2
Coord[3].SegMoveTime = 2
Coord[4].SegMoveTime = 2

// Axes are:
//   A - Gap
//   B - Taper
//   C - Elevation
//   U - Tilt
//
// Motors are:
//   1 - Gap Upstream
//   2 - Gap Downstream
//   3 - Elevation Upstream
//   4 - Elevation Downstream
//
// Definitions:
//   Taper: Gap Downstream minus Gap Upstream)
//   Tilt:  Elevation Downstream minus Elevation Upstream


&2 Open Forward

if (KinVelEna) { callsub 100 }           // For double-pass calculations
KinAxisUsed = KinEnaAxisA + KinEnaAxisB  // A and B computed

N100:
KinPosAxisA = ((KinPosMotor1 + KinPosMotor2) / 2) / kEncCtsPerUm
KinPosAxisB =  (KinPosMotor2 - KinPosMotor1)      / kEncCtsPerUm

close

&2 Open Inverse

KinPosMotor1 = (KinPosAxisA - KinPosAxisB / 2) * kEncCtsPerUm
KinPosMotor2 = (KinPosAxisA + KinPosAxisB / 2) * kEncCtsPerUm

if (KinVelEna) {
  KinPosMotor1 = (KinPosAxisA - KinPosAxisB / 2) * kEncCtsPerUm
  KinPosMotor2 = (KinPosAxisA + KinPosAxisB / 2) * kEncCtsPerUm
}

close





&3 open forward
KinPosAxisC = ((KinPosMotor3 + KinPosMotor4) / 2) / kEncCtsPerUm
KinPosAxisU =  (KinPosMotor4 - KinPosMotor3)      / kEncCtsPerUm
close

&3 open inverse
KinPosMotor3 = (KinPosAxisC - KinPosAxisU / 2) * kEncCtsPerUm
KinPosMotor4 = (KinPosAxisC + KinPosAxisU / 2) * kEncCtsPerUm
close




&4 open forward
KinPosAxisA = ((KinPosMotor1 + KinPosMotor2) / 2) / kEncCtsPerUm
KinPosAxisB =  (KinPosMotor2 - KinPosMotor1)      / kEncCtsPerUm
KinPosAxisC = ((KinPosMotor3 + KinPosMotor4) / 2) / kEncCtsPerUm
KinPosAxisU =  (KinPosMotor4 - KinPosMotor3)      / kEncCtsPerUm
close

&4 open inverse
KinPosMotor1 = (KinPosAxisA - KinPosAxisB / 2) * kEncCtsPerUm
KinPosMotor2 = (KinPosAxisA + KinPosAxisB / 2) * kEncCtsPerUm
KinPosMotor3 = (KinPosAxisC - KinPosAxisU / 2) * kEncCtsPerUm
KinPosMotor4 = (KinPosAxisC + KinPosAxisU / 2) * kEncCtsPerUm
close

