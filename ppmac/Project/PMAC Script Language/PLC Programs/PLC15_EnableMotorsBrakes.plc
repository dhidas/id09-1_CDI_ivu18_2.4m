// PLC for allowing user to release all brakes (amp Ena) in prep for some
// moves where it is faster to use the .VAL field of the epics driver directly
// e.g. faster step scans.


Open PLC 15

// Check if all is requested
if (gAllBrakeReleaseReq == kTRUE) {
  gAllBrakeReleaseReq = kFALSE
  gGapBrakeReleaseReq = kTRUE
  gElevBrakeReleaseReq = kTRUE
}

// Gap brakes
if (gGapBrakeReleaseReq == kTRUE) {
  gGapBrakeReleaseReq = kFALSE

  if (gStopAllStatus == kFALSE && gInterlockState == kFALSE && gOpenGapExecuting == kFALSE && gHomingInProgress == kFALSE) {

    pAmpEnaOut(1) = kON
    pAmpEnaOut(2) = kON

    call AmpEnableDelay()

    jog/1..2

    TIMER130BRAKES = gBrakeTimeout * 1000
    gBrakeTimerArmed = kTRUE

  }
}

// Elevation brakes
if (gElevBrakeReleaseReq == kTRUE) {
  gElevBrakeReleaseReq = kFALSE

  if (gStopAllStatus == kFALSE && gInterlockState == kFALSE && gOpenGapExecuting == kFALSE && gHomingInProgress == kFALSE) {

    pAmpEnaOut(3) = kON
    pAmpEnaOut(4) = kON

    call AmpEnableDelay()

    jog/3..4

    TIMER130BRAKES = gBrakeTimeout * 1000
    gBrakeTimerArmed = kTRUE

  }
}


// Check status of brakes
if (pAmpEnaOut(1) == kON && pAmpEnaOut(2) == kON) {
  gGapBrakesReleased = kTRUE
} else {
  gGapBrakesReleased = kFALSE
}
if (pAmpEnaOut(3) == kON && pAmpEnaOut(4) == kON) {
  gElevBrakesReleased = kTRUE
} else {
  gElevBrakesReleased = kFALSE
}
if (gGapBrakesReleased == kTRUE && gElevBrakesReleased == kTRUE) {
  gAllBrakesReleased = kTRUE
} else {
  gAllBrakesReleased = kFALSE
}


Close
