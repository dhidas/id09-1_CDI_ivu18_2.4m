

Open PLC 6

local lMotorHoming
local lMotorFollowing
local lMotorHomingOriginalSpeed
local lJogToPosition

// Check for true bit for homing request.  Do nothing if no request
if (gHomeRequest != kTRUE) {
  // Only check this once a second
  call Timer(1.00)
  return
}

// Got the request and processing it so now set it back to false
gHomeRequest = kFALSE

// Check if a homing request has been made for a legit motor number (1-4)
if (gMotorHomingNumber == 0 || gMotorHomingNumber < 0 || gMotorHomingNumber > 4) {
  GOTO 666
}


// If we are here then a homing request has been made.  Set the homing in progress
// bit, kill all motors, record the motor to be homed, and set the request back to zero.
gHomingTimeout = kFALSE
gHomingAmpError = kFALSE
gHomingInProgress = kTRUE
gHomingSwitchNotFound = kFALSE
lMotorHoming = gMotorHomingNumber
gMotorHomingNumber = 0
gHomingThisMotor = lMotorHoming
CMD"#*k"


// Copy original jog speed for restoring later
lMotorHomingOriginalSpeed = Motor[lMotorHoming].JogSpeed


// Stop any/all motor following
Motor[1].MasterCtrl=kFALSE
Motor[2].MasterCtrl=kFALSE
Motor[3].MasterCtrl=kFALSE
Motor[4].MasterCtrl=kFALSE

switch (lMotorHoming) {
  case 1:
    lMotorFollowing = 2
    break
  case 2:
    lMotorFollowing = 1
    break
  case 3:
    lMotorFollowing = 4
    break
  case 4:
    lMotorFollowing = 3
    break
  default:
    GOTO 666
    break
}


// Set following
Motor[lMotorFollowing].MasterCtrl = kTRUE

// Enable homer and following
Ldata.motor = lMotorHoming
CMD"j/"
call Timer(0.020)
Ldata.motor = lMotorFollowing
CMD"j/"
call Timer(0.020)


// Check that these motors enabled properly.  If not, exit with an error
if (Motor[lMotorHoming].AmpEna + Motor[lMotorFollowing].AmpEna != 2) {
  gHomingAmpError = kTRUE
  GOTO 666
}


// First get this motor touching the home switch.  If the limit switch is seen and not
// the home switch exit with an error
if (pHomeFlag(lMotorHoming) == kZERO && Motor[lMotorHoming].PlusLimit == kFALSE) {
  Ldata.motor = lMotorHoming
  CMD"j+"
  call Timer(0.200)

  TIMER060HOMING = 300000
  while (pHomeFlag(lMotorHoming) == kZERO && Motor[lMotorHoming].PlusLimit == kFALSE && TIMER060HOMING > 0) {}
  if (TIMER060HOMING <= 0) {
    // Timeout in homing, report and abort
    gHomingTimeout = kTRUE
    GOTO 666
  }
}
if (Motor[lMotorHoming].PlusLimit == kTRUE && pHomeFlag(lMotorHoming) == kZERO) {
  gHomingSwitchNotFound = kTRUE
    GOTO 666
}
call Timer(0.500)
Ldata.motor = lMotorHoming
CMD"j/"
call Timer(0.200)

// At this point we should touching the home switch

// Now set the jog speed to very slow
Motor[lMotorHoming].JogSpeed = kHOMESPEED

// Home the motor using the move until trigger with a small post move.  Use a timeout as a backup.
TIMER060HOMING = 60000
Motor[lMotorHoming].ProgJogPos = Motor[lMotorHoming].Pos - Motor[lMotorHoming].HomePos - 3000000
Ldata.motor = lMotorHoming
CMD"j=*^-100000"
while (pHomeFlag(lMotorHoming) == kONE && TIMER060HOMING > 0) {}           // Wait for end
if (TIMER060HOMING <= 0) {
  // Timeout in homing, report and abort
  gHomingTimeout = kTRUE
  GOTO 666
}
if (Motor[lMotorHoming].MinusLimit == kTRUE) {
  gHomingSwitchNotFound = kTRUE
}


// Cleanup and exit
N666:

CMD"#*k"

// Stop any/all motor following
Motor[1].MasterCtrl=kFALSE
Motor[2].MasterCtrl=kFALSE
Motor[3].MasterCtrl=kFALSE
Motor[4].MasterCtrl=kFALSE

gMotorHomingNumber = 0
gHomingInProgress = kFALSE
gHomingThisMotor = 0

// Reset jog speed
Motor[lMotorHoming].JogSpeed = lMotorHomingOriginalSpeed 

Close

